// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.21.12
// source: order.proto

package proto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 订单主状态
type OrderMainStatus int32

const (
	// 未知
	OrderMainStatus_ORDER_MAIN_STATUS_UNKNOWN OrderMainStatus = 0
	// 未支付
	OrderMainStatus_ORDER_MAIN_STATUS_UNPAID OrderMainStatus = 5
	// 待接单
	OrderMainStatus_ORDER_MAIN_STATUS_WAIT_CONFIRM OrderMainStatus = 10
	// 已接单
	OrderMainStatus_ORDER_MAIN_STATUS_CONFIRMED OrderMainStatus = 20
	// 配送中
	OrderMainStatus_ORDER_MAIN_STATUS_DELIVERING OrderMainStatus = 30
	// 配送完成
	OrderMainStatus_ORDER_MAIN_STATUS_DELIVERED OrderMainStatus = 40
	// 取消中
	OrderMainStatus_ORDER_MAIN_STATUS_CANCELING OrderMainStatus = 50
	// 已取消
	OrderMainStatus_ORDER_MAIN_STATUS_CANCELED OrderMainStatus = 60
	// 已完成
	OrderMainStatus_ORDER_MAIN_STATUS_FINISHED OrderMainStatus = 70
)

// Enum value maps for OrderMainStatus.
var (
	OrderMainStatus_name = map[int32]string{
		0:  "ORDER_MAIN_STATUS_UNKNOWN",
		5:  "ORDER_MAIN_STATUS_UNPAID",
		10: "ORDER_MAIN_STATUS_WAIT_CONFIRM",
		20: "ORDER_MAIN_STATUS_CONFIRMED",
		30: "ORDER_MAIN_STATUS_DELIVERING",
		40: "ORDER_MAIN_STATUS_DELIVERED",
		50: "ORDER_MAIN_STATUS_CANCELING",
		60: "ORDER_MAIN_STATUS_CANCELED",
		70: "ORDER_MAIN_STATUS_FINISHED",
	}
	OrderMainStatus_value = map[string]int32{
		"ORDER_MAIN_STATUS_UNKNOWN":      0,
		"ORDER_MAIN_STATUS_UNPAID":       5,
		"ORDER_MAIN_STATUS_WAIT_CONFIRM": 10,
		"ORDER_MAIN_STATUS_CONFIRMED":    20,
		"ORDER_MAIN_STATUS_DELIVERING":   30,
		"ORDER_MAIN_STATUS_DELIVERED":    40,
		"ORDER_MAIN_STATUS_CANCELING":    50,
		"ORDER_MAIN_STATUS_CANCELED":     60,
		"ORDER_MAIN_STATUS_FINISHED":     70,
	}
)

func (x OrderMainStatus) Enum() *OrderMainStatus {
	p := new(OrderMainStatus)
	*p = x
	return p
}

func (x OrderMainStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderMainStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[0].Descriptor()
}

func (OrderMainStatus) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[0]
}

func (x OrderMainStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderMainStatus.Descriptor instead.
func (OrderMainStatus) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

// 子单的主状态
type SubOrderStatus int32

const (
	SubOrderStatus_SUB_ORDER_STATUS_UNKNOWN SubOrderStatus = 0
	// 备货中/待发货
	SubOrderStatus_SUB_ORDER_STATUS_PREPARING SubOrderStatus = 5
	// 配送中
	SubOrderStatus_SUB_ORDER_STATUS_SHIPPING SubOrderStatus = 10
	// 取消中
	SubOrderStatus_SUB_ORDER_STATUS_CANCELING SubOrderStatus = 95
	// 已到达 (终态)
	SubOrderStatus_SUB_ORDER_STATUS_ARRIVED SubOrderStatus = 20
	// 已取消 (终态)
	SubOrderStatus_SUB_ORDER_STATUS_CANCELED SubOrderStatus = 99
)

// Enum value maps for SubOrderStatus.
var (
	SubOrderStatus_name = map[int32]string{
		0:  "SUB_ORDER_STATUS_UNKNOWN",
		5:  "SUB_ORDER_STATUS_PREPARING",
		10: "SUB_ORDER_STATUS_SHIPPING",
		95: "SUB_ORDER_STATUS_CANCELING",
		20: "SUB_ORDER_STATUS_ARRIVED",
		99: "SUB_ORDER_STATUS_CANCELED",
	}
	SubOrderStatus_value = map[string]int32{
		"SUB_ORDER_STATUS_UNKNOWN":   0,
		"SUB_ORDER_STATUS_PREPARING": 5,
		"SUB_ORDER_STATUS_SHIPPING":  10,
		"SUB_ORDER_STATUS_CANCELING": 95,
		"SUB_ORDER_STATUS_ARRIVED":   20,
		"SUB_ORDER_STATUS_CANCELED":  99,
	}
)

func (x SubOrderStatus) Enum() *SubOrderStatus {
	p := new(SubOrderStatus)
	*p = x
	return p
}

func (x SubOrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubOrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[1].Descriptor()
}

func (SubOrderStatus) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[1]
}

func (x SubOrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubOrderStatus.Descriptor instead.
func (SubOrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

// 子单的呼叫状态
type SubOrderDeliveryCallingStatus int32

const (
	SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_UNKNOWN SubOrderDeliveryCallingStatus = 0
	// 待呼叫
	SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_PENDING SubOrderDeliveryCallingStatus = 1
	// 呼叫中
	SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_PROCESSING SubOrderDeliveryCallingStatus = 2
	// 已成功
	SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_SUCCESSFUL SubOrderDeliveryCallingStatus = 3
	// 已失败
	SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_FAILED SubOrderDeliveryCallingStatus = 4
)

// Enum value maps for SubOrderDeliveryCallingStatus.
var (
	SubOrderDeliveryCallingStatus_name = map[int32]string{
		0: "SUB_ORDER_DELIVERY_CALLING_STATUS_UNKNOWN",
		1: "SUB_ORDER_DELIVERY_CALLING_STATUS_PENDING",
		2: "SUB_ORDER_DELIVERY_CALLING_STATUS_PROCESSING",
		3: "SUB_ORDER_DELIVERY_CALLING_STATUS_SUCCESSFUL",
		4: "SUB_ORDER_DELIVERY_CALLING_STATUS_FAILED",
	}
	SubOrderDeliveryCallingStatus_value = map[string]int32{
		"SUB_ORDER_DELIVERY_CALLING_STATUS_UNKNOWN":    0,
		"SUB_ORDER_DELIVERY_CALLING_STATUS_PENDING":    1,
		"SUB_ORDER_DELIVERY_CALLING_STATUS_PROCESSING": 2,
		"SUB_ORDER_DELIVERY_CALLING_STATUS_SUCCESSFUL": 3,
		"SUB_ORDER_DELIVERY_CALLING_STATUS_FAILED":     4,
	}
)

func (x SubOrderDeliveryCallingStatus) Enum() *SubOrderDeliveryCallingStatus {
	p := new(SubOrderDeliveryCallingStatus)
	*p = x
	return p
}

func (x SubOrderDeliveryCallingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubOrderDeliveryCallingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[2].Descriptor()
}

func (SubOrderDeliveryCallingStatus) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[2]
}

func (x SubOrderDeliveryCallingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubOrderDeliveryCallingStatus.Descriptor instead.
func (SubOrderDeliveryCallingStatus) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

// 用户取货方式
type OrderUserPickupMethod int32

const (
	// 未知
	OrderUserPickupMethod_ORDER_USER_PICKUP_METHOD_UNKNOWN OrderUserPickupMethod = 0
	// 送货上门
	OrderUserPickupMethod_ORDER_USER_PICKUP_METHOD_DELIVERY OrderUserPickupMethod = 1
	// 到店自提
	OrderUserPickupMethod_ORDER_USER_PICKUP_METHOD_SELF_PICKUP OrderUserPickupMethod = 2
)

// Enum value maps for OrderUserPickupMethod.
var (
	OrderUserPickupMethod_name = map[int32]string{
		0: "ORDER_USER_PICKUP_METHOD_UNKNOWN",
		1: "ORDER_USER_PICKUP_METHOD_DELIVERY",
		2: "ORDER_USER_PICKUP_METHOD_SELF_PICKUP",
	}
	OrderUserPickupMethod_value = map[string]int32{
		"ORDER_USER_PICKUP_METHOD_UNKNOWN":     0,
		"ORDER_USER_PICKUP_METHOD_DELIVERY":    1,
		"ORDER_USER_PICKUP_METHOD_SELF_PICKUP": 2,
	}
)

func (x OrderUserPickupMethod) Enum() *OrderUserPickupMethod {
	p := new(OrderUserPickupMethod)
	*p = x
	return p
}

func (x OrderUserPickupMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderUserPickupMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[3].Descriptor()
}

func (OrderUserPickupMethod) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[3]
}

func (x OrderUserPickupMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderUserPickupMethod.Descriptor instead.
func (OrderUserPickupMethod) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

type OrderEventType int32

const (
	// 未知
	OrderEventType_ORDER_EVENT_TYPE_UNKNOWN OrderEventType = 0
	// 创建po成功
	OrderEventType_ORDER_EVENT_TYPE_PO_CREATED OrderEventType = 1
	// 商家确认接单
	OrderEventType_ORDER_EVENT_TYPE_ORDER_CONFIRMED OrderEventType = 2
	// 已部分发货
	OrderEventType_ORDER_EVENT_TYPE_ORDER_PARTIAL_SHIPPED OrderEventType = 3
	// 已全部发货
	OrderEventType_ORDER_EVENT_TYPE_ORDER_ALL_SHIPPED OrderEventType = 4
	// 配送完成
	OrderEventType_ORDER_EVENT_TYPE_ORDER_DELIVERED_COMPLETE OrderEventType = 5
	// 已取消
	OrderEventType_ORDER_EVENT_TYPE_ORDER_CANCELED OrderEventType = 6
	// 取消中
	OrderEventType_ORDER_EVENT_TYPE_ORDER_CANCELLING OrderEventType = 7
	// 已完成
	OrderEventType_ORDER_EVENT_TYPE_ORDER_COMPLETED OrderEventType = 8
)

// Enum value maps for OrderEventType.
var (
	OrderEventType_name = map[int32]string{
		0: "ORDER_EVENT_TYPE_UNKNOWN",
		1: "ORDER_EVENT_TYPE_PO_CREATED",
		2: "ORDER_EVENT_TYPE_ORDER_CONFIRMED",
		3: "ORDER_EVENT_TYPE_ORDER_PARTIAL_SHIPPED",
		4: "ORDER_EVENT_TYPE_ORDER_ALL_SHIPPED",
		5: "ORDER_EVENT_TYPE_ORDER_DELIVERED_COMPLETE",
		6: "ORDER_EVENT_TYPE_ORDER_CANCELED",
		7: "ORDER_EVENT_TYPE_ORDER_CANCELLING",
		8: "ORDER_EVENT_TYPE_ORDER_COMPLETED",
	}
	OrderEventType_value = map[string]int32{
		"ORDER_EVENT_TYPE_UNKNOWN":                  0,
		"ORDER_EVENT_TYPE_PO_CREATED":               1,
		"ORDER_EVENT_TYPE_ORDER_CONFIRMED":          2,
		"ORDER_EVENT_TYPE_ORDER_PARTIAL_SHIPPED":    3,
		"ORDER_EVENT_TYPE_ORDER_ALL_SHIPPED":        4,
		"ORDER_EVENT_TYPE_ORDER_DELIVERED_COMPLETE": 5,
		"ORDER_EVENT_TYPE_ORDER_CANCELED":           6,
		"ORDER_EVENT_TYPE_ORDER_CANCELLING":         7,
		"ORDER_EVENT_TYPE_ORDER_COMPLETED":          8,
	}
)

func (x OrderEventType) Enum() *OrderEventType {
	p := new(OrderEventType)
	*p = x
	return p
}

func (x OrderEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[4].Descriptor()
}

func (OrderEventType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[4]
}

func (x OrderEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderEventType.Descriptor instead.
func (OrderEventType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

type OrderTagType int32

const (
	OrderTagType_ORDER_TAG_UNKNOWN OrderTagType = 0
	// 用户主动修改订单收货信息，非商家;
	OrderTagType_ORDER_TAG_RECEIVE_INFO_MODIFIED OrderTagType = 1
	// 订单物流异常;
	OrderTagType_ORDER_TAG_LOGISTICS_EXCEPTION OrderTagType = 2
	// 买家发起售后申请;
	OrderTagType_ORDER_TAG_REFUND_APPLIED_BY_USER OrderTagType = 3
	// 商家主动修改订单收货信息;
	OrderTagType_ORDER_TAG_RECEIVE_INFO_MODIFIED_BY_MERCHANT OrderTagType = 4
	// 订单需要进一步解密;
	OrderTagType_ORDER_TAG_REQUIRE_DECRYPTION OrderTagType = 5
	// 批量呼叫配送异常;
	OrderTagType_ORDER_TAG_BATCH_CALLING_DELIVERY_EXCEPTION OrderTagType = 6
	// 配送平台无人接单异常;
	OrderTagType_ORDER_TAG_NOT_ACCEPTED_DELIVERY_EXCEPTION OrderTagType = 7
	// 骑手或平台取消订单的异常;
	OrderTagType_ORDER_TAG_CANCELED_EXCEPTION OrderTagType = 8
)

// Enum value maps for OrderTagType.
var (
	OrderTagType_name = map[int32]string{
		0: "ORDER_TAG_UNKNOWN",
		1: "ORDER_TAG_RECEIVE_INFO_MODIFIED",
		2: "ORDER_TAG_LOGISTICS_EXCEPTION",
		3: "ORDER_TAG_REFUND_APPLIED_BY_USER",
		4: "ORDER_TAG_RECEIVE_INFO_MODIFIED_BY_MERCHANT",
		5: "ORDER_TAG_REQUIRE_DECRYPTION",
		6: "ORDER_TAG_BATCH_CALLING_DELIVERY_EXCEPTION",
		7: "ORDER_TAG_NOT_ACCEPTED_DELIVERY_EXCEPTION",
		8: "ORDER_TAG_CANCELED_EXCEPTION",
	}
	OrderTagType_value = map[string]int32{
		"ORDER_TAG_UNKNOWN":                           0,
		"ORDER_TAG_RECEIVE_INFO_MODIFIED":             1,
		"ORDER_TAG_LOGISTICS_EXCEPTION":               2,
		"ORDER_TAG_REFUND_APPLIED_BY_USER":            3,
		"ORDER_TAG_RECEIVE_INFO_MODIFIED_BY_MERCHANT": 4,
		"ORDER_TAG_REQUIRE_DECRYPTION":                5,
		"ORDER_TAG_BATCH_CALLING_DELIVERY_EXCEPTION":  6,
		"ORDER_TAG_NOT_ACCEPTED_DELIVERY_EXCEPTION":   7,
		"ORDER_TAG_CANCELED_EXCEPTION":                8,
	}
)

func (x OrderTagType) Enum() *OrderTagType {
	p := new(OrderTagType)
	*p = x
	return p
}

func (x OrderTagType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTagType) Descriptor() protoreflect.EnumDescriptor {
	return file_order_proto_enumTypes[5].Descriptor()
}

func (OrderTagType) Type() protoreflect.EnumType {
	return &file_order_proto_enumTypes[5]
}

func (x OrderTagType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTagType.Descriptor instead.
func (OrderTagType) EnumDescriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

// 订单用户相关信息
type OrderUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 收货人姓名
	ReceiverName string `protobuf:"bytes,1,opt,name=receiver_name,json=receiverName,proto3" json:"receiver_name,omitempty"`
	// 收货人电话, 真实号 or 虚拟号
	ReceiverPhone string `protobuf:"bytes,2,opt,name=receiver_phone,json=receiverPhone,proto3" json:"receiver_phone,omitempty"`
	// 收货人完整地址
	ReceiverAddress string `protobuf:"bytes,3,opt,name=receiver_address,json=receiverAddress,proto3" json:"receiver_address,omitempty"`
	// 用户下单备注
	UserRemark string `protobuf:"bytes,4,opt,name=user_remark,json=userRemark,proto3" json:"user_remark,omitempty"`
	// 期望送达时间
	ExpectedArrivalTime *timestamp.Timestamp `protobuf:"bytes,5,opt,name=expected_arrival_time,json=expectedArrivalTime,proto3" json:"expected_arrival_time,omitempty"`
	// 经度, 高德
	Longitude string `protobuf:"bytes,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// 纬度, 高德
	Latitude string `protobuf:"bytes,7,opt,name=latitude,proto3" json:"latitude,omitempty"`
}

func (x *OrderUserInfo) Reset() {
	*x = OrderUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUserInfo) ProtoMessage() {}

func (x *OrderUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUserInfo.ProtoReflect.Descriptor instead.
func (*OrderUserInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderUserInfo) GetReceiverName() string {
	if x != nil {
		return x.ReceiverName
	}
	return ""
}

func (x *OrderUserInfo) GetReceiverPhone() string {
	if x != nil {
		return x.ReceiverPhone
	}
	return ""
}

func (x *OrderUserInfo) GetReceiverAddress() string {
	if x != nil {
		return x.ReceiverAddress
	}
	return ""
}

func (x *OrderUserInfo) GetUserRemark() string {
	if x != nil {
		return x.UserRemark
	}
	return ""
}

func (x *OrderUserInfo) GetExpectedArrivalTime() *timestamp.Timestamp {
	if x != nil {
		return x.ExpectedArrivalTime
	}
	return nil
}

func (x *OrderUserInfo) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *OrderUserInfo) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

// 订单商品信息
type OrderItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台订单号，主单号
	PlatformOrderId string `protobuf:"bytes,1,opt,name=platform_order_id,json=platformOrderId,proto3" json:"platform_order_id,omitempty"`
	// 平台子单号，一般是按照sku维度的
	PlatformOrderItemId string `protobuf:"bytes,2,opt,name=platform_order_item_id,json=platformOrderItemId,proto3" json:"platform_order_item_id,omitempty"`
	// 平台商品SPU ID
	PlatformSpuId string `protobuf:"bytes,3,opt,name=platform_spu_id,json=platformSpuId,proto3" json:"platform_spu_id,omitempty"`
	// 平台商品SKU ID
	PlatformSkuId string `protobuf:"bytes,4,opt,name=platform_sku_id,json=platformSkuId,proto3" json:"platform_sku_id,omitempty"`
	// 平台商品SKU 名称
	PlatformSkuName string `protobuf:"bytes,5,opt,name=platform_sku_name,json=platformSkuName,proto3" json:"platform_sku_name,omitempty"`
	// 平台sku商品图片
	PlatformSkuPictureUrl string `protobuf:"bytes,6,opt,name=platform_sku_picture_url,json=platformSkuPictureUrl,proto3" json:"platform_sku_picture_url,omitempty"`
	// 单个sku的商品现价（实际支付价格），单位：分
	ActualPrice int32 `protobuf:"varint,7,opt,name=actual_price,json=actualPrice,proto3" json:"actual_price,omitempty"`
	// 单个sku的商品原价（未扣减所有优惠前的价格），单位：分
	OriginalPrice int32 `protobuf:"varint,8,opt,name=original_price,json=originalPrice,proto3" json:"original_price,omitempty"`
	// 订单中此商品sku的购买数量
	Quantity int32 `protobuf:"varint,9,opt,name=quantity,proto3" json:"quantity,omitempty"`
	// order_item 主键
	Id int64 `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
	// 平台商品SPU 外部 ID
	PlatformSpuOutId string `protobuf:"bytes,11,opt,name=platform_spu_out_id,json=platformSpuOutId,proto3" json:"platform_spu_out_id,omitempty"`
	// 平台商品SKU 外部 ID
	PlatformSkuOutId string `protobuf:"bytes,12,opt,name=platform_sku_out_id,json=platformSkuOutId,proto3" json:"platform_sku_out_id,omitempty"`
}

func (x *OrderItem) Reset() {
	*x = OrderItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderItem) ProtoMessage() {}

func (x *OrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderItem.ProtoReflect.Descriptor instead.
func (*OrderItem) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{1}
}

func (x *OrderItem) GetPlatformOrderId() string {
	if x != nil {
		return x.PlatformOrderId
	}
	return ""
}

func (x *OrderItem) GetPlatformOrderItemId() string {
	if x != nil {
		return x.PlatformOrderItemId
	}
	return ""
}

func (x *OrderItem) GetPlatformSpuId() string {
	if x != nil {
		return x.PlatformSpuId
	}
	return ""
}

func (x *OrderItem) GetPlatformSkuId() string {
	if x != nil {
		return x.PlatformSkuId
	}
	return ""
}

func (x *OrderItem) GetPlatformSkuName() string {
	if x != nil {
		return x.PlatformSkuName
	}
	return ""
}

func (x *OrderItem) GetPlatformSkuPictureUrl() string {
	if x != nil {
		return x.PlatformSkuPictureUrl
	}
	return ""
}

func (x *OrderItem) GetActualPrice() int32 {
	if x != nil {
		return x.ActualPrice
	}
	return 0
}

func (x *OrderItem) GetOriginalPrice() int32 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *OrderItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderItem) GetPlatformSpuOutId() string {
	if x != nil {
		return x.PlatformSpuOutId
	}
	return ""
}

func (x *OrderItem) GetPlatformSkuOutId() string {
	if x != nil {
		return x.PlatformSkuOutId
	}
	return ""
}

// 订单金额信息
type OrderAmountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单金额，GMV, 单位：分
	Total int32 `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	// 用户实付，支持金额，单位：分
	UserPaid int32 `protobuf:"varint,2,opt,name=user_paid,json=userPaid,proto3" json:"user_paid,omitempty"`
	// 总的优惠金额，单位：分
	DiscountAmount int32 `protobuf:"varint,3,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`
	// 用户支付的配送费，单位：分
	DeliveryFee int32 `protobuf:"varint,4,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	// 实际配送产生的配送费，单位：分
	OrderDeliveryFee int32 `protobuf:"varint,5,opt,name=order_delivery_fee,json=orderDeliveryFee,proto3" json:"order_delivery_fee,omitempty"`
	// sku维度的包装费, 特殊包材，精美礼盒包装等， 单位：分
	PackingFee int32 `protobuf:"varint,6,opt,name=packing_fee,json=packingFee,proto3" json:"packing_fee,omitempty"`
	// 打包费， 单位：分
	OrderPackingFee int32 `protobuf:"varint,7,opt,name=order_packing_fee,json=orderPackingFee,proto3" json:"order_packing_fee,omitempty"`
	// 平台补贴， 单位：分
	PlatformSubsidy int32 `protobuf:"varint,8,opt,name=platform_subsidy,json=platformSubsidy,proto3" json:"platform_subsidy,omitempty"`
	// 平台抽佣， 单位：分
	PlatformCommission int32 `protobuf:"varint,9,opt,name=platform_commission,json=platformCommission,proto3" json:"platform_commission,omitempty"`
	// 预计收入，单位：分
	EstimatedIncome int32 `protobuf:"varint,10,opt,name=estimated_income,json=estimatedIncome,proto3" json:"estimated_income,omitempty"`
}

func (x *OrderAmountInfo) Reset() {
	*x = OrderAmountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAmountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAmountInfo) ProtoMessage() {}

func (x *OrderAmountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAmountInfo.ProtoReflect.Descriptor instead.
func (*OrderAmountInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{2}
}

func (x *OrderAmountInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *OrderAmountInfo) GetUserPaid() int32 {
	if x != nil {
		return x.UserPaid
	}
	return 0
}

func (x *OrderAmountInfo) GetDiscountAmount() int32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *OrderAmountInfo) GetDeliveryFee() int32 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *OrderAmountInfo) GetOrderDeliveryFee() int32 {
	if x != nil {
		return x.OrderDeliveryFee
	}
	return 0
}

func (x *OrderAmountInfo) GetPackingFee() int32 {
	if x != nil {
		return x.PackingFee
	}
	return 0
}

func (x *OrderAmountInfo) GetOrderPackingFee() int32 {
	if x != nil {
		return x.OrderPackingFee
	}
	return 0
}

func (x *OrderAmountInfo) GetPlatformSubsidy() int32 {
	if x != nil {
		return x.PlatformSubsidy
	}
	return 0
}

func (x *OrderAmountInfo) GetPlatformCommission() int32 {
	if x != nil {
		return x.PlatformCommission
	}
	return 0
}

func (x *OrderAmountInfo) GetEstimatedIncome() int32 {
	if x != nil {
		return x.EstimatedIncome
	}
	return 0
}

type SimpleOrderAmountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户实付，支持金额，单位：分
	UserPaid int32 `protobuf:"varint,1,opt,name=user_paid,json=userPaid,proto3" json:"user_paid,omitempty"`
	// 预计收入，单位：分
	EstimatedIncome int32 `protobuf:"varint,2,opt,name=estimated_income,json=estimatedIncome,proto3" json:"estimated_income,omitempty"`
}

func (x *SimpleOrderAmountInfo) Reset() {
	*x = SimpleOrderAmountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleOrderAmountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleOrderAmountInfo) ProtoMessage() {}

func (x *SimpleOrderAmountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleOrderAmountInfo.ProtoReflect.Descriptor instead.
func (*SimpleOrderAmountInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{3}
}

func (x *SimpleOrderAmountInfo) GetUserPaid() int32 {
	if x != nil {
		return x.UserPaid
	}
	return 0
}

func (x *SimpleOrderAmountInfo) GetEstimatedIncome() int32 {
	if x != nil {
		return x.EstimatedIncome
	}
	return 0
}

// 订单门店信息
type OrderShopInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台门店主键
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 平台门店ID
	PlatformShopId string `protobuf:"bytes,2,opt,name=platform_shop_id,json=platformShopId,proto3" json:"platform_shop_id,omitempty"`
	// 平台门店名称
	PlatformShopName string `protobuf:"bytes,3,opt,name=platform_shop_name,json=platformShopName,proto3" json:"platform_shop_name,omitempty"`
	// 门店的物流类型, 自配送or平台专送
	DeliveryType DeliveryType `protobuf:"varint,4,opt,name=delivery_type,json=deliveryType,proto3,enum=order.platform_shop.DeliveryType" json:"delivery_type,omitempty"`
	// 门店的发货方式 门店直发or仓库代发
	ShipmentMethod PlatformShopShipmentMethod `protobuf:"varint,5,opt,name=shipment_method,json=shipmentMethod,proto3,enum=order.platform_shop.PlatformShopShipmentMethod" json:"shipment_method,omitempty"`
}

func (x *OrderShopInfo) Reset() {
	*x = OrderShopInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderShopInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderShopInfo) ProtoMessage() {}

func (x *OrderShopInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderShopInfo.ProtoReflect.Descriptor instead.
func (*OrderShopInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{4}
}

func (x *OrderShopInfo) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderShopInfo) GetPlatformShopId() string {
	if x != nil {
		return x.PlatformShopId
	}
	return ""
}

func (x *OrderShopInfo) GetPlatformShopName() string {
	if x != nil {
		return x.PlatformShopName
	}
	return ""
}

func (x *OrderShopInfo) GetDeliveryType() DeliveryType {
	if x != nil {
		return x.DeliveryType
	}
	return DeliveryType_DELIVERY_TYPE_UNKNOWN
}

func (x *OrderShopInfo) GetShipmentMethod() PlatformShopShipmentMethod {
	if x != nil {
		return x.ShipmentMethod
	}
	return PlatformShopShipmentMethod_PLATFORM_SHOP_SHIPMENT_METHOD_UNKNOWN
}

// 订单优惠信息
type OrderDiscountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 商品名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 优惠金额, 单位 分
	Amount int32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *OrderDiscountInfo) Reset() {
	*x = OrderDiscountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDiscountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDiscountInfo) ProtoMessage() {}

func (x *OrderDiscountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDiscountInfo.ProtoReflect.Descriptor instead.
func (*OrderDiscountInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{5}
}

func (x *OrderDiscountInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrderDiscountInfo) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

// 平台订单
type PlatformOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlatformOrderId         string               `protobuf:"bytes,1,opt,name=platform_order_id,json=platformOrderId,proto3" json:"platform_order_id,omitempty"`
	PlatformType            PlatformType         `protobuf:"varint,2,opt,name=platform_type,json=platformType,proto3,enum=order.common.PlatformType" json:"platform_type,omitempty"`
	PlatformShopId          string               `protobuf:"bytes,3,opt,name=platform_shop_id,json=platformShopId,proto3" json:"platform_shop_id,omitempty"`
	PlatformShopPk          int32                `protobuf:"varint,4,opt,name=platform_shop_pk,json=platformShopPk,proto3" json:"platform_shop_pk,omitempty"`
	Detail                  string               `protobuf:"bytes,5,opt,name=detail,proto3" json:"detail,omitempty"`
	PlatformOrderStatus     string               `protobuf:"bytes,6,opt,name=platform_order_status,json=platformOrderStatus,proto3" json:"platform_order_status,omitempty"`
	PlatformOrderStatusDesc string               `protobuf:"bytes,7,opt,name=platform_order_status_desc,json=platformOrderStatusDesc,proto3" json:"platform_order_status_desc,omitempty"`
	CreateTime              *timestamp.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *PlatformOrder) Reset() {
	*x = PlatformOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformOrder) ProtoMessage() {}

func (x *PlatformOrder) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformOrder.ProtoReflect.Descriptor instead.
func (*PlatformOrder) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{6}
}

func (x *PlatformOrder) GetPlatformOrderId() string {
	if x != nil {
		return x.PlatformOrderId
	}
	return ""
}

func (x *PlatformOrder) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_PLATFORM_TYPE_UNKNOWN
}

func (x *PlatformOrder) GetPlatformShopId() string {
	if x != nil {
		return x.PlatformShopId
	}
	return ""
}

func (x *PlatformOrder) GetPlatformShopPk() int32 {
	if x != nil {
		return x.PlatformShopPk
	}
	return 0
}

func (x *PlatformOrder) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *PlatformOrder) GetPlatformOrderStatus() string {
	if x != nil {
		return x.PlatformOrderStatus
	}
	return ""
}

func (x *PlatformOrder) GetPlatformOrderStatusDesc() string {
	if x != nil {
		return x.PlatformOrderStatusDesc
	}
	return ""
}

func (x *PlatformOrder) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type SubOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 子单主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 平台订单号，主单号
	PlatformOrderId string `protobuf:"bytes,2,opt,name=platform_order_id,json=platformOrderId,proto3" json:"platform_order_id,omitempty"`
	// 平台类型
	PlatformType PlatformType `protobuf:"varint,3,opt,name=platform_type,json=platformType,proto3,enum=order.common.PlatformType" json:"platform_type,omitempty"`
	// wms 发货仓库; 如果是门店直发，则是门店的发货地址ID; 如是仓库，则是仓库系统内的仓库 ID
	WarehouseId int64 `protobuf:"varint,5,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	// 配送运单号
	DeliveryOrderNumber string `protobuf:"bytes,6,opt,name=delivery_order_number,json=deliveryOrderNumber,proto3" json:"delivery_order_number,omitempty"`
	// 配送单平台类型, 如 顺丰
	DeliveryOrderPlatformTypeDesc string `protobuf:"bytes,7,opt,name=delivery_order_platform_type_desc,json=deliveryOrderPlatformTypeDesc,proto3" json:"delivery_order_platform_type_desc,omitempty"`
	// 运单状态
	DeliveryOrderStatus string `protobuf:"bytes,8,opt,name=delivery_order_status,json=deliveryOrderStatus,proto3" json:"delivery_order_status,omitempty"`
	// 运单状态描述
	DeliveryOrderStatusDesc string `protobuf:"bytes,9,opt,name=delivery_order_status_desc,json=deliveryOrderStatusDesc,proto3" json:"delivery_order_status_desc,omitempty"`
	// 发货单状态
	ShipmentOrderStatus string `protobuf:"bytes,10,opt,name=shipment_order_status,json=shipmentOrderStatus,proto3" json:"shipment_order_status,omitempty"`
	// 发货单状态描述
	ShipmentOrderStatusDesc string `protobuf:"bytes,11,opt,name=shipment_order_status_desc,json=shipmentOrderStatusDesc,proto3" json:"shipment_order_status_desc,omitempty"`
	// wms 系统内的发货单编号
	ShipmentOrderNumber string `protobuf:"bytes,12,opt,name=shipment_order_number,json=shipmentOrderNumber,proto3" json:"shipment_order_number,omitempty"`
	// 骑手姓名
	RiderName string `protobuf:"bytes,13,opt,name=rider_name,json=riderName,proto3" json:"rider_name,omitempty"`
	// 骑手电话
	RiderPhone string `protobuf:"bytes,14,opt,name=rider_phone,json=riderPhone,proto3" json:"rider_phone,omitempty"`
	// 配送费，单位：分
	DeliveryFee int32 `protobuf:"varint,15,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	// 主状态
	Status SubOrderStatus `protobuf:"varint,16,opt,name=status,proto3,enum=order.order.SubOrderStatus" json:"status,omitempty"`
	// 是否是手动标记配送
	IsManualDelivery bool `protobuf:"varint,17,opt,name=is_manual_delivery,json=isManualDelivery,proto3" json:"is_manual_delivery,omitempty"`
	// 商户自定义配送编码
	MerchantLogisticsSerialNumber string `protobuf:"bytes,18,opt,name=merchant_logistics_serial_number,json=merchantLogisticsSerialNumber,proto3" json:"merchant_logistics_serial_number,omitempty"`
	// 主单ID
	OrderId int64 `protobuf:"varint,19,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 配送的呼叫状态
	DeliveryCallingStatus SubOrderDeliveryCallingStatus `protobuf:"varint,20,opt,name=delivery_calling_status,json=deliveryCallingStatus,proto3,enum=order.order.SubOrderDeliveryCallingStatus" json:"delivery_calling_status,omitempty"`
	// 发货仓库名称
	WarehouseName string `protobuf:"bytes,21,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	// 取消罚金，单位：分
	CancelFee int32 `protobuf:"varint,22,opt,name=cancel_fee,json=cancelFee,proto3" json:"cancel_fee,omitempty"`
}

func (x *SubOrder) Reset() {
	*x = SubOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrder) ProtoMessage() {}

func (x *SubOrder) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrder.ProtoReflect.Descriptor instead.
func (*SubOrder) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{7}
}

func (x *SubOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubOrder) GetPlatformOrderId() string {
	if x != nil {
		return x.PlatformOrderId
	}
	return ""
}

func (x *SubOrder) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_PLATFORM_TYPE_UNKNOWN
}

func (x *SubOrder) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *SubOrder) GetDeliveryOrderNumber() string {
	if x != nil {
		return x.DeliveryOrderNumber
	}
	return ""
}

func (x *SubOrder) GetDeliveryOrderPlatformTypeDesc() string {
	if x != nil {
		return x.DeliveryOrderPlatformTypeDesc
	}
	return ""
}

func (x *SubOrder) GetDeliveryOrderStatus() string {
	if x != nil {
		return x.DeliveryOrderStatus
	}
	return ""
}

func (x *SubOrder) GetDeliveryOrderStatusDesc() string {
	if x != nil {
		return x.DeliveryOrderStatusDesc
	}
	return ""
}

func (x *SubOrder) GetShipmentOrderStatus() string {
	if x != nil {
		return x.ShipmentOrderStatus
	}
	return ""
}

func (x *SubOrder) GetShipmentOrderStatusDesc() string {
	if x != nil {
		return x.ShipmentOrderStatusDesc
	}
	return ""
}

func (x *SubOrder) GetShipmentOrderNumber() string {
	if x != nil {
		return x.ShipmentOrderNumber
	}
	return ""
}

func (x *SubOrder) GetRiderName() string {
	if x != nil {
		return x.RiderName
	}
	return ""
}

func (x *SubOrder) GetRiderPhone() string {
	if x != nil {
		return x.RiderPhone
	}
	return ""
}

func (x *SubOrder) GetDeliveryFee() int32 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *SubOrder) GetStatus() SubOrderStatus {
	if x != nil {
		return x.Status
	}
	return SubOrderStatus_SUB_ORDER_STATUS_UNKNOWN
}

func (x *SubOrder) GetIsManualDelivery() bool {
	if x != nil {
		return x.IsManualDelivery
	}
	return false
}

func (x *SubOrder) GetMerchantLogisticsSerialNumber() string {
	if x != nil {
		return x.MerchantLogisticsSerialNumber
	}
	return ""
}

func (x *SubOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SubOrder) GetDeliveryCallingStatus() SubOrderDeliveryCallingStatus {
	if x != nil {
		return x.DeliveryCallingStatus
	}
	return SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_UNKNOWN
}

func (x *SubOrder) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *SubOrder) GetCancelFee() int32 {
	if x != nil {
		return x.CancelFee
	}
	return 0
}

//简单的子订单信息
type SimpleSubOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 子单主键
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 运单状态码
	DeliveryOrderStatus string `protobuf:"bytes,2,opt,name=delivery_order_status,json=deliveryOrderStatus,proto3" json:"delivery_order_status,omitempty"`
	// 运单状态描述
	DeliveryOrderStatusDesc string `protobuf:"bytes,3,opt,name=delivery_order_status_desc,json=deliveryOrderStatusDesc,proto3" json:"delivery_order_status_desc,omitempty"`
	// 发货单状态
	ShipmentOrderStatus string `protobuf:"bytes,4,opt,name=shipment_order_status,json=shipmentOrderStatus,proto3" json:"shipment_order_status,omitempty"`
	// 发货单状态描述
	ShipmentOrderStatusDesc string `protobuf:"bytes,5,opt,name=shipment_order_status_desc,json=shipmentOrderStatusDesc,proto3" json:"shipment_order_status_desc,omitempty"`
	// 配送费 单位 分
	DeliveryFee int32 `protobuf:"varint,6,opt,name=delivery_fee,json=deliveryFee,proto3" json:"delivery_fee,omitempty"`
	// 子单的主状态码
	Status SubOrderStatus `protobuf:"varint,7,opt,name=status,proto3,enum=order.order.SubOrderStatus" json:"status,omitempty"`
	// 商户自定义配送编码
	MerchantLogisticsSerialNumber string `protobuf:"bytes,8,opt,name=merchant_logistics_serial_number,json=merchantLogisticsSerialNumber,proto3" json:"merchant_logistics_serial_number,omitempty"`
	// 子单的呼叫状态
	DeliveryCallingStatus SubOrderDeliveryCallingStatus `protobuf:"varint,9,opt,name=delivery_calling_status,json=deliveryCallingStatus,proto3,enum=order.order.SubOrderDeliveryCallingStatus" json:"delivery_calling_status,omitempty"`
	// wms 发货仓库; 如果是门店直发，则是门店的发货地址ID; 如是仓库，则是仓库系统内的仓库 ID
	WarehouseId int64 `protobuf:"varint,10,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	// wms 发货仓库名称
	WarehouseName string `protobuf:"bytes,11,opt,name=warehouse_name,json=warehouseName,proto3" json:"warehouse_name,omitempty"`
	// wms 系统内的发货单编号
	ShipmentOrderNumber string `protobuf:"bytes,12,opt,name=shipment_order_number,json=shipmentOrderNumber,proto3" json:"shipment_order_number,omitempty"`
}

func (x *SimpleSubOrder) Reset() {
	*x = SimpleSubOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSubOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSubOrder) ProtoMessage() {}

func (x *SimpleSubOrder) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSubOrder.ProtoReflect.Descriptor instead.
func (*SimpleSubOrder) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{8}
}

func (x *SimpleSubOrder) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SimpleSubOrder) GetDeliveryOrderStatus() string {
	if x != nil {
		return x.DeliveryOrderStatus
	}
	return ""
}

func (x *SimpleSubOrder) GetDeliveryOrderStatusDesc() string {
	if x != nil {
		return x.DeliveryOrderStatusDesc
	}
	return ""
}

func (x *SimpleSubOrder) GetShipmentOrderStatus() string {
	if x != nil {
		return x.ShipmentOrderStatus
	}
	return ""
}

func (x *SimpleSubOrder) GetShipmentOrderStatusDesc() string {
	if x != nil {
		return x.ShipmentOrderStatusDesc
	}
	return ""
}

func (x *SimpleSubOrder) GetDeliveryFee() int32 {
	if x != nil {
		return x.DeliveryFee
	}
	return 0
}

func (x *SimpleSubOrder) GetStatus() SubOrderStatus {
	if x != nil {
		return x.Status
	}
	return SubOrderStatus_SUB_ORDER_STATUS_UNKNOWN
}

func (x *SimpleSubOrder) GetMerchantLogisticsSerialNumber() string {
	if x != nil {
		return x.MerchantLogisticsSerialNumber
	}
	return ""
}

func (x *SimpleSubOrder) GetDeliveryCallingStatus() SubOrderDeliveryCallingStatus {
	if x != nil {
		return x.DeliveryCallingStatus
	}
	return SubOrderDeliveryCallingStatus_SUB_ORDER_DELIVERY_CALLING_STATUS_UNKNOWN
}

func (x *SimpleSubOrder) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *SimpleSubOrder) GetWarehouseName() string {
	if x != nil {
		return x.WarehouseName
	}
	return ""
}

func (x *SimpleSubOrder) GetShipmentOrderNumber() string {
	if x != nil {
		return x.ShipmentOrderNumber
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 平台订单号
	PlatformOrderId string `protobuf:"bytes,1,opt,name=platform_order_id,json=platformOrderId,proto3" json:"platform_order_id,omitempty"`
	// 平台类型
	PlatformType PlatformType `protobuf:"varint,2,opt,name=platform_type,json=platformType,proto3,enum=order.common.PlatformType" json:"platform_type,omitempty"`
	// 订单主状态
	MainStatus OrderMainStatus `protobuf:"varint,3,opt,name=main_status,json=mainStatus,proto3,enum=order.order.OrderMainStatus" json:"main_status,omitempty"`
	// 订单主状态描述
	MainStatusDesc string `protobuf:"bytes,4,opt,name=main_status_desc,json=mainStatusDesc,proto3" json:"main_status_desc,omitempty"`
	// 收货人信息
	UserInfo *OrderUserInfo `protobuf:"bytes,5,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// 商品信息
	OrderItems []*OrderItem `protobuf:"bytes,6,rep,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`
	// 订单金额信息
	OrderAmountInfo *OrderAmountInfo `protobuf:"bytes,7,opt,name=order_amount_info,json=orderAmountInfo,proto3" json:"order_amount_info,omitempty"`
	// 订单门店信息
	OrderShopInfo *OrderShopInfo `protobuf:"bytes,8,opt,name=order_shop_info,json=orderShopInfo,proto3" json:"order_shop_info,omitempty"`
	// 订单下单时间
	CreateTime *timestamp.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 订单完成时间
	FinishTime *timestamp.Timestamp `protobuf:"bytes,10,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	// 订单取消时间
	CancelTime *timestamp.Timestamp `protobuf:"bytes,11,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time,omitempty"`
	// 订单主状态更新时间
	MainStatusUpdateTime *timestamp.Timestamp `protobuf:"bytes,12,opt,name=main_status_update_time,json=mainStatusUpdateTime,proto3" json:"main_status_update_time,omitempty"`
	// 疑似异常单
	IsAbnormal bool `protobuf:"varint,13,opt,name=is_abnormal,json=isAbnormal,proto3" json:"is_abnormal,omitempty"`
	// 异常原因列表
	AbnormalReason []string `protobuf:"bytes,14,rep,name=abnormal_reason,json=abnormalReason,proto3" json:"abnormal_reason,omitempty"`
	// 商家订单备注
	MerchantRemark string `protobuf:"bytes,15,opt,name=merchant_remark,json=merchantRemark,proto3" json:"merchant_remark,omitempty"`
	// 取消原因
	CancelReason string `protobuf:"bytes,17,opt,name=cancel_reason,json=cancelReason,proto3" json:"cancel_reason,omitempty"`
	// 优惠信息
	OrderDiscountInfo []*OrderDiscountInfo `protobuf:"bytes,18,rep,name=order_discount_info,json=orderDiscountInfo,proto3" json:"order_discount_info,omitempty"`
	// 订单主键
	OrderId int64 `protobuf:"varint,19,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 子单列表
	SubOrders []*SubOrder `protobuf:"bytes,20,rep,name=sub_orders,json=subOrders,proto3" json:"sub_orders,omitempty"`
	// 商家ID
	MerchantId int64 `protobuf:"varint,21,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// 订单标签列表
	Tags []*OrderTag `protobuf:"bytes,22,rep,name=tags,proto3" json:"tags,omitempty"`
	// 是否预订单
	IsPreOrder bool `protobuf:"varint,23,opt,name=is_pre_order,json=isPreOrder,proto3" json:"is_pre_order,omitempty"`
	// 物流代理端系统的标识，目前有xtw和other两种
	LogisticsAgentCode string `protobuf:"bytes,24,opt,name=logistics_agent_code,json=logisticsAgentCode,proto3" json:"logistics_agent_code,omitempty"`
	// 能否使用xtw物流端配送
	CanUseXtwLogistics bool `protobuf:"varint,25,opt,name=can_use_xtw_logistics,json=canUseXtwLogistics,proto3" json:"can_use_xtw_logistics,omitempty"`
	// 用户取货信息
	UserPickupInfo *OrderUserPickupInfo `protobuf:"bytes,26,opt,name=user_pickup_info,json=userPickupInfo,proto3" json:"user_pickup_info,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{9}
}

func (x *Order) GetPlatformOrderId() string {
	if x != nil {
		return x.PlatformOrderId
	}
	return ""
}

func (x *Order) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_PLATFORM_TYPE_UNKNOWN
}

func (x *Order) GetMainStatus() OrderMainStatus {
	if x != nil {
		return x.MainStatus
	}
	return OrderMainStatus_ORDER_MAIN_STATUS_UNKNOWN
}

func (x *Order) GetMainStatusDesc() string {
	if x != nil {
		return x.MainStatusDesc
	}
	return ""
}

func (x *Order) GetUserInfo() *OrderUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Order) GetOrderItems() []*OrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

func (x *Order) GetOrderAmountInfo() *OrderAmountInfo {
	if x != nil {
		return x.OrderAmountInfo
	}
	return nil
}

func (x *Order) GetOrderShopInfo() *OrderShopInfo {
	if x != nil {
		return x.OrderShopInfo
	}
	return nil
}

func (x *Order) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Order) GetFinishTime() *timestamp.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

func (x *Order) GetCancelTime() *timestamp.Timestamp {
	if x != nil {
		return x.CancelTime
	}
	return nil
}

func (x *Order) GetMainStatusUpdateTime() *timestamp.Timestamp {
	if x != nil {
		return x.MainStatusUpdateTime
	}
	return nil
}

func (x *Order) GetIsAbnormal() bool {
	if x != nil {
		return x.IsAbnormal
	}
	return false
}

func (x *Order) GetAbnormalReason() []string {
	if x != nil {
		return x.AbnormalReason
	}
	return nil
}

func (x *Order) GetMerchantRemark() string {
	if x != nil {
		return x.MerchantRemark
	}
	return ""
}

func (x *Order) GetCancelReason() string {
	if x != nil {
		return x.CancelReason
	}
	return ""
}

func (x *Order) GetOrderDiscountInfo() []*OrderDiscountInfo {
	if x != nil {
		return x.OrderDiscountInfo
	}
	return nil
}

func (x *Order) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *Order) GetSubOrders() []*SubOrder {
	if x != nil {
		return x.SubOrders
	}
	return nil
}

func (x *Order) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *Order) GetTags() []*OrderTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Order) GetIsPreOrder() bool {
	if x != nil {
		return x.IsPreOrder
	}
	return false
}

func (x *Order) GetLogisticsAgentCode() string {
	if x != nil {
		return x.LogisticsAgentCode
	}
	return ""
}

func (x *Order) GetCanUseXtwLogistics() bool {
	if x != nil {
		return x.CanUseXtwLogistics
	}
	return false
}

func (x *Order) GetUserPickupInfo() *OrderUserPickupInfo {
	if x != nil {
		return x.UserPickupInfo
	}
	return nil
}

type OrderTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *OrderTag) Reset() {
	*x = OrderTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTag) ProtoMessage() {}

func (x *OrderTag) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTag.ProtoReflect.Descriptor instead.
func (*OrderTag) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{10}
}

func (x *OrderTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *OrderTag) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// 订单用户取货信息
type OrderUserPickupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 用户取货方式
	PickupMethod OrderUserPickupMethod `protobuf:"varint,1,opt,name=pickup_method,json=pickupMethod,proto3,enum=order.order.OrderUserPickupMethod" json:"pickup_method,omitempty"`
	// 到底自提取货码
	PickupCode string `protobuf:"bytes,2,opt,name=pickup_code,json=pickupCode,proto3" json:"pickup_code,omitempty"`
}

func (x *OrderUserPickupInfo) Reset() {
	*x = OrderUserPickupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderUserPickupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderUserPickupInfo) ProtoMessage() {}

func (x *OrderUserPickupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderUserPickupInfo.ProtoReflect.Descriptor instead.
func (*OrderUserPickupInfo) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{11}
}

func (x *OrderUserPickupInfo) GetPickupMethod() OrderUserPickupMethod {
	if x != nil {
		return x.PickupMethod
	}
	return OrderUserPickupMethod_ORDER_USER_PICKUP_METHOD_UNKNOWN
}

func (x *OrderUserPickupInfo) GetPickupCode() string {
	if x != nil {
		return x.PickupCode
	}
	return ""
}

// 简单的订单信息
type SimpleOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单主键
	OrderId int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 平台订单号
	PlatformOrderId string `protobuf:"bytes,2,opt,name=platform_order_id,json=platformOrderId,proto3" json:"platform_order_id,omitempty"`
	// 平台类型
	PlatformType PlatformType `protobuf:"varint,3,opt,name=platform_type,json=platformType,proto3,enum=order.common.PlatformType" json:"platform_type,omitempty"`
	// 订单主状态
	MainStatus OrderMainStatus `protobuf:"varint,4,opt,name=main_status,json=mainStatus,proto3,enum=order.order.OrderMainStatus" json:"main_status,omitempty"`
	// 订单主状态描述
	MainStatusDesc string `protobuf:"bytes,5,opt,name=main_status_desc,json=mainStatusDesc,proto3" json:"main_status_desc,omitempty"`
	// 收货人信息
	UserInfo *OrderUserInfo `protobuf:"bytes,6,opt,name=user_info,json=userInfo,proto3" json:"user_info,omitempty"`
	// 商品信息
	OrderItems []*OrderItem `protobuf:"bytes,7,rep,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`
	// 订单下单时间
	CreateTime *timestamp.Timestamp `protobuf:"bytes,8,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// 订单门店信息
	OrderShopInfo *OrderShopInfo `protobuf:"bytes,9,opt,name=order_shop_info,json=orderShopInfo,proto3" json:"order_shop_info,omitempty"`
	// 子单列表
	SimpleSubOrders []*SimpleSubOrder `protobuf:"bytes,10,rep,name=simple_sub_orders,json=simpleSubOrders,proto3" json:"simple_sub_orders,omitempty"`
	// 商家ID
	MerchantId int64 `protobuf:"varint,11,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// 简单订单金额
	SimpleOrderAmountInfo *SimpleOrderAmountInfo `protobuf:"bytes,12,opt,name=simple_order_amount_info,json=simpleOrderAmountInfo,proto3" json:"simple_order_amount_info,omitempty"`
	// 是否预订单
	IsPreOrder bool `protobuf:"varint,13,opt,name=is_pre_order,json=isPreOrder,proto3" json:"is_pre_order,omitempty"`
	// 疑似异常
	IsAbnormal bool `protobuf:"varint,14,opt,name=is_abnormal,json=isAbnormal,proto3" json:"is_abnormal,omitempty"`
	// 异常原因列表
	AbnormalReason []string `protobuf:"bytes,15,rep,name=abnormal_reason,json=abnormalReason,proto3" json:"abnormal_reason,omitempty"`
	// 订单标签
	Tags []*OrderTag `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty"`
	// 物流代理端系统的标识，目前有xtw和other两种
	LogisticsAgentCode string `protobuf:"bytes,17,opt,name=logistics_agent_code,json=logisticsAgentCode,proto3" json:"logistics_agent_code,omitempty"`
	// 能否使用xtw物流端配送
	CanUseXtwLogistics bool `protobuf:"varint,19,opt,name=can_use_xtw_logistics,json=canUseXtwLogistics,proto3" json:"can_use_xtw_logistics,omitempty"`
	// 用户取货信息
	UserPickupInfo *OrderUserPickupInfo `protobuf:"bytes,20,opt,name=user_pickup_info,json=userPickupInfo,proto3" json:"user_pickup_info,omitempty"`
}

func (x *SimpleOrder) Reset() {
	*x = SimpleOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleOrder) ProtoMessage() {}

func (x *SimpleOrder) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleOrder.ProtoReflect.Descriptor instead.
func (*SimpleOrder) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{12}
}

func (x *SimpleOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SimpleOrder) GetPlatformOrderId() string {
	if x != nil {
		return x.PlatformOrderId
	}
	return ""
}

func (x *SimpleOrder) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_PLATFORM_TYPE_UNKNOWN
}

func (x *SimpleOrder) GetMainStatus() OrderMainStatus {
	if x != nil {
		return x.MainStatus
	}
	return OrderMainStatus_ORDER_MAIN_STATUS_UNKNOWN
}

func (x *SimpleOrder) GetMainStatusDesc() string {
	if x != nil {
		return x.MainStatusDesc
	}
	return ""
}

func (x *SimpleOrder) GetUserInfo() *OrderUserInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *SimpleOrder) GetOrderItems() []*OrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

func (x *SimpleOrder) GetCreateTime() *timestamp.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SimpleOrder) GetOrderShopInfo() *OrderShopInfo {
	if x != nil {
		return x.OrderShopInfo
	}
	return nil
}

func (x *SimpleOrder) GetSimpleSubOrders() []*SimpleSubOrder {
	if x != nil {
		return x.SimpleSubOrders
	}
	return nil
}

func (x *SimpleOrder) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *SimpleOrder) GetSimpleOrderAmountInfo() *SimpleOrderAmountInfo {
	if x != nil {
		return x.SimpleOrderAmountInfo
	}
	return nil
}

func (x *SimpleOrder) GetIsPreOrder() bool {
	if x != nil {
		return x.IsPreOrder
	}
	return false
}

func (x *SimpleOrder) GetIsAbnormal() bool {
	if x != nil {
		return x.IsAbnormal
	}
	return false
}

func (x *SimpleOrder) GetAbnormalReason() []string {
	if x != nil {
		return x.AbnormalReason
	}
	return nil
}

func (x *SimpleOrder) GetTags() []*OrderTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *SimpleOrder) GetLogisticsAgentCode() string {
	if x != nil {
		return x.LogisticsAgentCode
	}
	return ""
}

func (x *SimpleOrder) GetCanUseXtwLogistics() bool {
	if x != nil {
		return x.CanUseXtwLogistics
	}
	return false
}

func (x *SimpleOrder) GetUserPickupInfo() *OrderUserPickupInfo {
	if x != nil {
		return x.UserPickupInfo
	}
	return nil
}

// 订单记录
type OrderEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单主键
	OrderId int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	// 平台订单号
	PlatformOrderId string `protobuf:"bytes,2,opt,name=platform_order_id,json=platformOrderId,proto3" json:"platform_order_id,omitempty"`
	// 平台类型
	PlatformType PlatformType `protobuf:"varint,3,opt,name=platform_type,json=platformType,proto3,enum=order.common.PlatformType" json:"platform_type,omitempty"`
	// 事件类型
	EventType OrderEventType `protobuf:"varint,4,opt,name=event_type,json=eventType,proto3,enum=order.order.OrderEventType" json:"event_type,omitempty"`
	// 事件描述
	EventDesc string `protobuf:"bytes,5,opt,name=event_desc,json=eventDesc,proto3" json:"event_desc,omitempty"`
	// 事件时间
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 操作人名字
	CreatedByName string `protobuf:"bytes,7,opt,name=created_by_name,json=createdByName,proto3" json:"created_by_name,omitempty"`
	// 操作人 ID
	CreatedBy int64 `protobuf:"varint,8,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// 事件详情
	Detail string `protobuf:"bytes,9,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *OrderEvent) Reset() {
	*x = OrderEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderEvent) ProtoMessage() {}

func (x *OrderEvent) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderEvent.ProtoReflect.Descriptor instead.
func (*OrderEvent) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{13}
}

func (x *OrderEvent) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderEvent) GetPlatformOrderId() string {
	if x != nil {
		return x.PlatformOrderId
	}
	return ""
}

func (x *OrderEvent) GetPlatformType() PlatformType {
	if x != nil {
		return x.PlatformType
	}
	return PlatformType_PLATFORM_TYPE_UNKNOWN
}

func (x *OrderEvent) GetEventType() OrderEventType {
	if x != nil {
		return x.EventType
	}
	return OrderEventType_ORDER_EVENT_TYPE_UNKNOWN
}

func (x *OrderEvent) GetEventDesc() string {
	if x != nil {
		return x.EventDesc
	}
	return ""
}

func (x *OrderEvent) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrderEvent) GetCreatedByName() string {
	if x != nil {
		return x.CreatedByName
	}
	return ""
}

func (x *OrderEvent) GetCreatedBy() int64 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *OrderEvent) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type ListSimpleOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 页码, 可选，默认1
	Page int32 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	// 分页大小, 可选，默认20, 最多 1000
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 平台类型列表, 可选
	PlatformTypes []PlatformType `protobuf:"varint,3,rep,packed,name=platform_types,json=platformTypes,proto3,enum=order.common.PlatformType" json:"platform_types,omitempty"`
	// 商家ID列表, 可选
	MerchantIds []int64 `protobuf:"varint,4,rep,packed,name=merchant_ids,json=merchantIds,proto3" json:"merchant_ids,omitempty"`
	// 订单创建时间开始, 可选, 传入毫秒时间戳
	CreateTimeStart int64 `protobuf:"varint,5,opt,name=create_time_start,json=createTimeStart,proto3" json:"create_time_start,omitempty"`
	// 订单创建时间结束, 可选, 传入毫秒时间戳
	CreateTimeEnd int64 `protobuf:"varint,6,opt,name=create_time_end,json=createTimeEnd,proto3" json:"create_time_end,omitempty"`
	// 平台订单号列表, 可选
	PlatformOrderIds []string `protobuf:"bytes,7,rep,name=platform_order_ids,json=platformOrderIds,proto3" json:"platform_order_ids,omitempty"`
	// 平台门店名称列表, 可选
	PlatformShopNames []string `protobuf:"bytes,8,rep,name=platform_shop_names,json=platformShopNames,proto3" json:"platform_shop_names,omitempty"`
	// 订单主状态列表, 可选
	MainStatusList []OrderMainStatus `protobuf:"varint,9,rep,packed,name=main_status_list,json=mainStatusList,proto3,enum=order.order.OrderMainStatus" json:"main_status_list,omitempty"`
	// 手机号后四位，可选
	MobileLastFour string `protobuf:"bytes,10,opt,name=mobile_last_four,json=mobileLastFour,proto3" json:"mobile_last_four,omitempty"`
	// 子单ID，可选
	SubOrderId int64 `protobuf:"varint,11,opt,name=sub_order_id,json=subOrderId,proto3" json:"sub_order_id,omitempty"`
	// 仅查看预约单，可选
	OnlyPreOrder bool `protobuf:"varint,12,opt,name=only_pre_order,json=onlyPreOrder,proto3" json:"only_pre_order,omitempty"`
	// 仅查看退款单，可选
	OnlyRefundOrder bool `protobuf:"varint,13,opt,name=only_refund_order,json=onlyRefundOrder,proto3" json:"only_refund_order,omitempty"`
	// 单个商家ID, 可选
	MerchantId int64 `protobuf:"varint,14,opt,name=merchant_id,json=merchantId,proto3" json:"merchant_id,omitempty"`
	// 平台门店主键列表, 可选
	PlatformShopPks []int64 `protobuf:"varint,15,rep,packed,name=platform_shop_pks,json=platformShopPks,proto3" json:"platform_shop_pks,omitempty"`
	// 禁止分页
	DisablePagination bool `protobuf:"varint,16,opt,name=disable_pagination,json=disablePagination,proto3" json:"disable_pagination,omitempty"`
	// 是否仅查看异常单，可选 默认是 false
	OnlyAbnormal bool `protobuf:"varint,17,opt,name=only_abnormal,json=onlyAbnormal,proto3" json:"only_abnormal,omitempty"`
	// 子单关联的商家物流号
	MerchantLogisticsSerialNumber string `protobuf:"bytes,18,opt,name=merchant_logistics_serial_number,json=merchantLogisticsSerialNumber,proto3" json:"merchant_logistics_serial_number,omitempty"`
	// 是否仅查看信天翁物流端配送单，可选 默认是 false
	OnlyXtwLogistics bool `protobuf:"varint,19,opt,name=only_xtw_logistics,json=onlyXtwLogistics,proto3" json:"only_xtw_logistics,omitempty"`
	// 是否只查看活订单
	IsAliveOrders bool `protobuf:"varint,20,opt,name=is_alive_orders,json=isAliveOrders,proto3" json:"is_alive_orders,omitempty"`
	// 多个子单查询
	SubOrderIds []int64 `protobuf:"varint,21,rep,packed,name=sub_order_ids,json=subOrderIds,proto3" json:"sub_order_ids,omitempty"`
	// 多个发货门店查询，可选
	WarehouseIds []int64 `protobuf:"varint,22,rep,packed,name=warehouse_ids,json=warehouseIds,proto3" json:"warehouse_ids,omitempty"`
	// 订单tag查询
	OrderTagTypes []OrderTagType `protobuf:"varint,23,rep,packed,name=order_tag_types,json=orderTagTypes,proto3,enum=order.order.OrderTagType" json:"order_tag_types,omitempty"`
}

func (x *ListSimpleOrderRequest) Reset() {
	*x = ListSimpleOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSimpleOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSimpleOrderRequest) ProtoMessage() {}

func (x *ListSimpleOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSimpleOrderRequest.ProtoReflect.Descriptor instead.
func (*ListSimpleOrderRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{14}
}

func (x *ListSimpleOrderRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListSimpleOrderRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSimpleOrderRequest) GetPlatformTypes() []PlatformType {
	if x != nil {
		return x.PlatformTypes
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetMerchantIds() []int64 {
	if x != nil {
		return x.MerchantIds
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetCreateTimeStart() int64 {
	if x != nil {
		return x.CreateTimeStart
	}
	return 0
}

func (x *ListSimpleOrderRequest) GetCreateTimeEnd() int64 {
	if x != nil {
		return x.CreateTimeEnd
	}
	return 0
}

func (x *ListSimpleOrderRequest) GetPlatformOrderIds() []string {
	if x != nil {
		return x.PlatformOrderIds
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetPlatformShopNames() []string {
	if x != nil {
		return x.PlatformShopNames
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetMainStatusList() []OrderMainStatus {
	if x != nil {
		return x.MainStatusList
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetMobileLastFour() string {
	if x != nil {
		return x.MobileLastFour
	}
	return ""
}

func (x *ListSimpleOrderRequest) GetSubOrderId() int64 {
	if x != nil {
		return x.SubOrderId
	}
	return 0
}

func (x *ListSimpleOrderRequest) GetOnlyPreOrder() bool {
	if x != nil {
		return x.OnlyPreOrder
	}
	return false
}

func (x *ListSimpleOrderRequest) GetOnlyRefundOrder() bool {
	if x != nil {
		return x.OnlyRefundOrder
	}
	return false
}

func (x *ListSimpleOrderRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *ListSimpleOrderRequest) GetPlatformShopPks() []int64 {
	if x != nil {
		return x.PlatformShopPks
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetDisablePagination() bool {
	if x != nil {
		return x.DisablePagination
	}
	return false
}

func (x *ListSimpleOrderRequest) GetOnlyAbnormal() bool {
	if x != nil {
		return x.OnlyAbnormal
	}
	return false
}

func (x *ListSimpleOrderRequest) GetMerchantLogisticsSerialNumber() string {
	if x != nil {
		return x.MerchantLogisticsSerialNumber
	}
	return ""
}

func (x *ListSimpleOrderRequest) GetOnlyXtwLogistics() bool {
	if x != nil {
		return x.OnlyXtwLogistics
	}
	return false
}

func (x *ListSimpleOrderRequest) GetIsAliveOrders() bool {
	if x != nil {
		return x.IsAliveOrders
	}
	return false
}

func (x *ListSimpleOrderRequest) GetSubOrderIds() []int64 {
	if x != nil {
		return x.SubOrderIds
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetWarehouseIds() []int64 {
	if x != nil {
		return x.WarehouseIds
	}
	return nil
}

func (x *ListSimpleOrderRequest) GetOrderTagTypes() []OrderTagType {
	if x != nil {
		return x.OrderTagTypes
	}
	return nil
}

type ListSimpleOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleOrders []*SimpleOrder `protobuf:"bytes,1,rep,name=simple_orders,json=simpleOrders,proto3" json:"simple_orders,omitempty"`
	Total        int32          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListSimpleOrderResponse) Reset() {
	*x = ListSimpleOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSimpleOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSimpleOrderResponse) ProtoMessage() {}

func (x *ListSimpleOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSimpleOrderResponse.ProtoReflect.Descriptor instead.
func (*ListSimpleOrderResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{15}
}

func (x *ListSimpleOrderResponse) GetSimpleOrders() []*SimpleOrder {
	if x != nil {
		return x.SimpleOrders
	}
	return nil
}

func (x *ListSimpleOrderResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetOrderDetailByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 订单主键
	OrderId int64 `protobuf:"varint,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
}

func (x *GetOrderDetailByIdRequest) Reset() {
	*x = GetOrderDetailByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderDetailByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderDetailByIdRequest) ProtoMessage() {}

func (x *GetOrderDetailByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderDetailByIdRequest.ProtoReflect.Descriptor instead.
func (*GetOrderDetailByIdRequest) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{16}
}

func (x *GetOrderDetailByIdRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

type GetOrderDetailByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Order *Order `protobuf:"bytes,1,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetOrderDetailByIdResponse) Reset() {
	*x = GetOrderDetailByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderDetailByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderDetailByIdResponse) ProtoMessage() {}

func (x *GetOrderDetailByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderDetailByIdResponse.ProtoReflect.Descriptor instead.
func (*GetOrderDetailByIdResponse) Descriptor() ([]byte, []int) {
	return file_order_proto_rawDescGZIP(), []int{17}
}

func (x *GetOrderDetailByIdResponse) GetOrder() *Order {
	if x != nil {
		return x.Order
	}
	return nil
}

var File_order_proto protoreflect.FileDescriptor

var file_order_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1,
	0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x72, 0x72,
	0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75,
	0x64, 0x65, 0x22, 0xf5, 0x03, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x70, 0x75, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x75, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x6b,
	0x75, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x75, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x18, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x70, 0x69,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x6b, 0x75, 0x50, 0x69, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63,
	0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x70, 0x75, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x70, 0x75, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x6b, 0x75, 0x4f, 0x75, 0x74, 0x49, 0x64, 0x22, 0x92, 0x03, 0x0a, 0x0f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x65, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x69, 0x64, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x75, 0x62, 0x73,
	0x69, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x22,
	0x5f, 0x0a, 0x15, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x22, 0x99, 0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x58, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f,
	0x70, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x73, 0x68,
	0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x3f, 0x0a, 0x11,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x96, 0x03,
	0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x70, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x17, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x92, 0x08, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x21, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x69, 0x64,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x69, 0x64,
	0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x46, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x47, 0x0a,
	0x20, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x62, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46, 0x65, 0x65, 0x22, 0x85, 0x05, 0x0a, 0x0e,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x46, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1d, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x62, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x15,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x22, 0xbf, 0x0a, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a,
	0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d,
	0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x27,
	0x0a, 0x0f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x09, 0x73, 0x75, 0x62,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x63, 0x61, 0x6e, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x78, 0x74, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x55, 0x73, 0x65, 0x58, 0x74, 0x77,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x4a, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7f, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47,
	0x0a, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63,
	0x6b, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x69,
	0x63, 0x6b, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x80, 0x08, 0x0a, 0x0b, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0a, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x37, 0x0a, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x47, 0x0a, 0x11,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x75, 0x62, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x15, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x50, 0x72, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6c, 0x6f,
	0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x15,
	0x63, 0x61, 0x6e, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x78, 0x74, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x61, 0x6e,
	0x55, 0x73, 0x65, 0x58, 0x74, 0x77, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12,
	0x4a, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x03, 0x0a, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x93, 0x08, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x6f, 0x75, 0x72, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x50, 0x72, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x68, 0x6f, 0x70, 0x5f, 0x70, 0x6b, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0f, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x68, 0x6f, 0x70, 0x50, 0x6b, 0x73, 0x12, 0x2d,
	0x0a, 0x12, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x6e, 0x6c, 0x79, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x12, 0x47, 0x0a, 0x20, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x6d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x6f,
	0x6e, 0x6c, 0x79, 0x5f, 0x78, 0x74, 0x77, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6f, 0x6e, 0x6c, 0x79, 0x58, 0x74, 0x77,
	0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x6e, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x53, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x0c, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x36, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2a, 0xb7, 0x02,
	0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x50, 0x41, 0x49, 0x44, 0x10, 0x05, 0x12, 0x22,
	0x0a, 0x1e, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d,
	0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45,
	0x44, 0x10, 0x14, 0x12, 0x20, 0x0a, 0x1c, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x49, 0x4e, 0x47, 0x10, 0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x4d,
	0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x45, 0x44, 0x10, 0x28, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x32, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x3c, 0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x46, 0x2a, 0xca, 0x01, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55,
	0x42, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x42, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45,
	0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x48, 0x49,
	0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x55, 0x42, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x5f, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x55, 0x42, 0x5f, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52, 0x52, 0x49,
	0x56, 0x45, 0x44, 0x10, 0x14, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x55, 0x42, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x10, 0x63, 0x2a, 0x8f, 0x02, 0x0a, 0x1d, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x55, 0x42, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x55, 0x42, 0x5f, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x55, 0x42, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x55, 0x42, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x4c,
	0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x46, 0x55, 0x4c, 0x10, 0x03, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x55, 0x42, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x2a, 0x8e, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x63, 0x6b, 0x75, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x55, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48,
	0x4f, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x28, 0x0a,
	0x24, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x49, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x46, 0x5f, 0x50,
	0x49, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x2a, 0xea, 0x02, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x4f, 0x5f,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x44,
	0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41,
	0x4c, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x50, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x45,
	0x4c, 0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x24,
	0x0a, 0x20, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x08, 0x2a, 0xe7, 0x02, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x61,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54,
	0x41, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56,
	0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4c,
	0x4f, 0x47, 0x49, 0x53, 0x54, 0x49, 0x43, 0x53, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41,
	0x47, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44,
	0x5f, 0x42, 0x59, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x2f, 0x0a, 0x2b, 0x4f, 0x52,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x42, 0x59,
	0x5f, 0x4d, 0x45, 0x52, 0x43, 0x48, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x4f,
	0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x5f, 0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x2e, 0x0a,
	0x2a, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x42, 0x41, 0x54, 0x43, 0x48,
	0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52,
	0x59, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x2d, 0x0a,
	0x29, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c,
	0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x45, 0x44, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x32, 0xd3,
	0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x5c, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_order_proto_rawDescOnce sync.Once
	file_order_proto_rawDescData = file_order_proto_rawDesc
)

func file_order_proto_rawDescGZIP() []byte {
	file_order_proto_rawDescOnce.Do(func() {
		file_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_order_proto_rawDescData)
	})
	return file_order_proto_rawDescData
}

var file_order_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_order_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_order_proto_goTypes = []interface{}{
	(OrderMainStatus)(0),               // 0: order.order.OrderMainStatus
	(SubOrderStatus)(0),                // 1: order.order.SubOrderStatus
	(SubOrderDeliveryCallingStatus)(0), // 2: order.order.SubOrderDeliveryCallingStatus
	(OrderUserPickupMethod)(0),         // 3: order.order.OrderUserPickupMethod
	(OrderEventType)(0),                // 4: order.order.OrderEventType
	(OrderTagType)(0),                  // 5: order.order.OrderTagType
	(*OrderUserInfo)(nil),              // 6: order.order.OrderUserInfo
	(*OrderItem)(nil),                  // 7: order.order.OrderItem
	(*OrderAmountInfo)(nil),            // 8: order.order.OrderAmountInfo
	(*SimpleOrderAmountInfo)(nil),      // 9: order.order.SimpleOrderAmountInfo
	(*OrderShopInfo)(nil),              // 10: order.order.OrderShopInfo
	(*OrderDiscountInfo)(nil),          // 11: order.order.OrderDiscountInfo
	(*PlatformOrder)(nil),              // 12: order.order.PlatformOrder
	(*SubOrder)(nil),                   // 13: order.order.SubOrder
	(*SimpleSubOrder)(nil),             // 14: order.order.SimpleSubOrder
	(*Order)(nil),                      // 15: order.order.Order
	(*OrderTag)(nil),                   // 16: order.order.OrderTag
	(*OrderUserPickupInfo)(nil),        // 17: order.order.OrderUserPickupInfo
	(*SimpleOrder)(nil),                // 18: order.order.SimpleOrder
	(*OrderEvent)(nil),                 // 19: order.order.OrderEvent
	(*ListSimpleOrderRequest)(nil),     // 20: order.order.ListSimpleOrderRequest
	(*ListSimpleOrderResponse)(nil),    // 21: order.order.ListSimpleOrderResponse
	(*GetOrderDetailByIdRequest)(nil),  // 22: order.order.GetOrderDetailByIdRequest
	(*GetOrderDetailByIdResponse)(nil), // 23: order.order.GetOrderDetailByIdResponse
	(*timestamp.Timestamp)(nil),        // 24: google.protobuf.Timestamp
	(DeliveryType)(0),                  // 25: order.platform_shop.DeliveryType
	(PlatformShopShipmentMethod)(0),    // 26: order.platform_shop.PlatformShopShipmentMethod
	(PlatformType)(0),                  // 27: order.common.PlatformType
}
var file_order_proto_depIdxs = []int32{
	24, // 0: order.order.OrderUserInfo.expected_arrival_time:type_name -> google.protobuf.Timestamp
	25, // 1: order.order.OrderShopInfo.delivery_type:type_name -> order.platform_shop.DeliveryType
	26, // 2: order.order.OrderShopInfo.shipment_method:type_name -> order.platform_shop.PlatformShopShipmentMethod
	27, // 3: order.order.PlatformOrder.platform_type:type_name -> order.common.PlatformType
	24, // 4: order.order.PlatformOrder.create_time:type_name -> google.protobuf.Timestamp
	27, // 5: order.order.SubOrder.platform_type:type_name -> order.common.PlatformType
	1,  // 6: order.order.SubOrder.status:type_name -> order.order.SubOrderStatus
	2,  // 7: order.order.SubOrder.delivery_calling_status:type_name -> order.order.SubOrderDeliveryCallingStatus
	1,  // 8: order.order.SimpleSubOrder.status:type_name -> order.order.SubOrderStatus
	2,  // 9: order.order.SimpleSubOrder.delivery_calling_status:type_name -> order.order.SubOrderDeliveryCallingStatus
	27, // 10: order.order.Order.platform_type:type_name -> order.common.PlatformType
	0,  // 11: order.order.Order.main_status:type_name -> order.order.OrderMainStatus
	6,  // 12: order.order.Order.user_info:type_name -> order.order.OrderUserInfo
	7,  // 13: order.order.Order.order_items:type_name -> order.order.OrderItem
	8,  // 14: order.order.Order.order_amount_info:type_name -> order.order.OrderAmountInfo
	10, // 15: order.order.Order.order_shop_info:type_name -> order.order.OrderShopInfo
	24, // 16: order.order.Order.create_time:type_name -> google.protobuf.Timestamp
	24, // 17: order.order.Order.finish_time:type_name -> google.protobuf.Timestamp
	24, // 18: order.order.Order.cancel_time:type_name -> google.protobuf.Timestamp
	24, // 19: order.order.Order.main_status_update_time:type_name -> google.protobuf.Timestamp
	11, // 20: order.order.Order.order_discount_info:type_name -> order.order.OrderDiscountInfo
	13, // 21: order.order.Order.sub_orders:type_name -> order.order.SubOrder
	16, // 22: order.order.Order.tags:type_name -> order.order.OrderTag
	17, // 23: order.order.Order.user_pickup_info:type_name -> order.order.OrderUserPickupInfo
	3,  // 24: order.order.OrderUserPickupInfo.pickup_method:type_name -> order.order.OrderUserPickupMethod
	27, // 25: order.order.SimpleOrder.platform_type:type_name -> order.common.PlatformType
	0,  // 26: order.order.SimpleOrder.main_status:type_name -> order.order.OrderMainStatus
	6,  // 27: order.order.SimpleOrder.user_info:type_name -> order.order.OrderUserInfo
	7,  // 28: order.order.SimpleOrder.order_items:type_name -> order.order.OrderItem
	24, // 29: order.order.SimpleOrder.create_time:type_name -> google.protobuf.Timestamp
	10, // 30: order.order.SimpleOrder.order_shop_info:type_name -> order.order.OrderShopInfo
	14, // 31: order.order.SimpleOrder.simple_sub_orders:type_name -> order.order.SimpleSubOrder
	9,  // 32: order.order.SimpleOrder.simple_order_amount_info:type_name -> order.order.SimpleOrderAmountInfo
	16, // 33: order.order.SimpleOrder.tags:type_name -> order.order.OrderTag
	17, // 34: order.order.SimpleOrder.user_pickup_info:type_name -> order.order.OrderUserPickupInfo
	27, // 35: order.order.OrderEvent.platform_type:type_name -> order.common.PlatformType
	4,  // 36: order.order.OrderEvent.event_type:type_name -> order.order.OrderEventType
	24, // 37: order.order.OrderEvent.created_at:type_name -> google.protobuf.Timestamp
	27, // 38: order.order.ListSimpleOrderRequest.platform_types:type_name -> order.common.PlatformType
	0,  // 39: order.order.ListSimpleOrderRequest.main_status_list:type_name -> order.order.OrderMainStatus
	5,  // 40: order.order.ListSimpleOrderRequest.order_tag_types:type_name -> order.order.OrderTagType
	18, // 41: order.order.ListSimpleOrderResponse.simple_orders:type_name -> order.order.SimpleOrder
	15, // 42: order.order.GetOrderDetailByIdResponse.order:type_name -> order.order.Order
	20, // 43: order.order.OrderService.ListSimpleOrder:input_type -> order.order.ListSimpleOrderRequest
	22, // 44: order.order.OrderService.GetOrderDetailById:input_type -> order.order.GetOrderDetailByIdRequest
	21, // 45: order.order.OrderService.ListSimpleOrder:output_type -> order.order.ListSimpleOrderResponse
	23, // 46: order.order.OrderService.GetOrderDetailById:output_type -> order.order.GetOrderDetailByIdResponse
	45, // [45:47] is the sub-list for method output_type
	43, // [43:45] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_order_proto_init() }
func file_order_proto_init() {
	if File_order_proto != nil {
		return
	}
	file_common_proto_init()
	file_platform_shop_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAmountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleOrderAmountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderShopInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDiscountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSubOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderUserPickupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSimpleOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSimpleOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderDetailByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderDetailByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_order_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_order_proto_goTypes,
		DependencyIndexes: file_order_proto_depIdxs,
		EnumInfos:         file_order_proto_enumTypes,
		MessageInfos:      file_order_proto_msgTypes,
	}.Build()
	File_order_proto = out.File
	file_order_proto_rawDesc = nil
	file_order_proto_goTypes = nil
	file_order_proto_depIdxs = nil
}
